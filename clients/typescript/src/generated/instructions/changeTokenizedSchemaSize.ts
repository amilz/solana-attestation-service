/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHANGE_TOKENIZED_SCHEMA_SIZE_DISCRIMINATOR = 12;

export function getChangeTokenizedSchemaSizeDiscriminatorBytes() {
  return getU8Encoder().encode(CHANGE_TOKENIZED_SCHEMA_SIZE_DISCRIMINATOR);
}

export type ChangeTokenizedSchemaSizeInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSchemaMint extends string | IAccountMeta<string> = string,
  TAccountSchema extends string | IAccountMeta<string> = string,
  TAccountCredential extends string | IAccountMeta<string> = string,
  TAccountSasPda extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSchemaMint extends string
        ? WritableAccount<TAccountSchemaMint>
        : TAccountSchemaMint,
      TAccountSchema extends string
        ? ReadonlyAccount<TAccountSchema>
        : TAccountSchema,
      TAccountCredential extends string
        ? ReadonlyAccount<TAccountCredential>
        : TAccountCredential,
      TAccountSasPda extends string
        ? ReadonlyAccount<TAccountSasPda>
        : TAccountSasPda,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeTokenizedSchemaSizeInstructionData = {
  discriminator: number;
  maxSize: bigint;
};

export type ChangeTokenizedSchemaSizeInstructionDataArgs = {
  maxSize: number | bigint;
};

export function getChangeTokenizedSchemaSizeInstructionDataEncoder(): Encoder<ChangeTokenizedSchemaSizeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['maxSize', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CHANGE_TOKENIZED_SCHEMA_SIZE_DISCRIMINATOR,
    })
  );
}

export function getChangeTokenizedSchemaSizeInstructionDataDecoder(): Decoder<ChangeTokenizedSchemaSizeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['maxSize', getU64Decoder()],
  ]);
}

export function getChangeTokenizedSchemaSizeInstructionDataCodec(): Codec<
  ChangeTokenizedSchemaSizeInstructionDataArgs,
  ChangeTokenizedSchemaSizeInstructionData
> {
  return combineCodec(
    getChangeTokenizedSchemaSizeInstructionDataEncoder(),
    getChangeTokenizedSchemaSizeInstructionDataDecoder()
  );
}

export type ChangeTokenizedSchemaSizeInput<
  TAccountAuthority extends string = string,
  TAccountSchemaMint extends string = string,
  TAccountSchema extends string = string,
  TAccountCredential extends string = string,
  TAccountSasPda extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** Mint of Schema Token */
  schemaMint: Address<TAccountSchemaMint>;
  schema: Address<TAccountSchema>;
  credential: Address<TAccountCredential>;
  /** Program derived address used as program signer authority */
  sasPda: Address<TAccountSasPda>;
  tokenProgram?: Address<TAccountTokenProgram>;
  maxSize: ChangeTokenizedSchemaSizeInstructionDataArgs['maxSize'];
};

export function getChangeTokenizedSchemaSizeInstruction<
  TAccountAuthority extends string,
  TAccountSchemaMint extends string,
  TAccountSchema extends string,
  TAccountCredential extends string,
  TAccountSasPda extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
>(
  input: ChangeTokenizedSchemaSizeInput<
    TAccountAuthority,
    TAccountSchemaMint,
    TAccountSchema,
    TAccountCredential,
    TAccountSasPda,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeTokenizedSchemaSizeInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountSchemaMint,
  TAccountSchema,
  TAccountCredential,
  TAccountSasPda,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    schemaMint: { value: input.schemaMint ?? null, isWritable: true },
    schema: { value: input.schema ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    sasPda: { value: input.sasPda ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.schemaMint),
      getAccountMeta(accounts.schema),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.sasPda),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getChangeTokenizedSchemaSizeInstructionDataEncoder().encode(
      args as ChangeTokenizedSchemaSizeInstructionDataArgs
    ),
  } as ChangeTokenizedSchemaSizeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountSchemaMint,
    TAccountSchema,
    TAccountCredential,
    TAccountSasPda,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedChangeTokenizedSchemaSizeInstruction<
  TProgram extends string = typeof SOLANA_ATTESTATION_SERVICE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** Mint of Schema Token */
    schemaMint: TAccountMetas[1];
    schema: TAccountMetas[2];
    credential: TAccountMetas[3];
    /** Program derived address used as program signer authority */
    sasPda: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: ChangeTokenizedSchemaSizeInstructionData;
};

export function parseChangeTokenizedSchemaSizeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeTokenizedSchemaSizeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      schemaMint: getNextAccount(),
      schema: getNextAccount(),
      credential: getNextAccount(),
      sasPda: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getChangeTokenizedSchemaSizeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
